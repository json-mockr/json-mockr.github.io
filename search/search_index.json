{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to json-mockr A customizable web server for mocking HTTP JSON API responses for REST webservices. json-mockr is written in Kotlin using Springboot as the underlying server. Motivation The motivation behind this software is to provide an easy way to mock external APIs during development phase without much configuration but also flexible enough. Features Support for nested resources GET, POST, PUT, DELETE with NOT_FOUND , METHOD_NOT_ALLOWED , OK , CREATED and NO_CONTENT responses List responses with arrays or wrapped in a custom envelope Resource validation with BAD_REQUEST responses Limitations PATCH NOT IMPLEMENTED In Memory database (by design)","title":"Home"},{"location":"#welcome-to-json-mockr","text":"A customizable web server for mocking HTTP JSON API responses for REST webservices. json-mockr is written in Kotlin using Springboot as the underlying server.","title":"Welcome to json-mockr"},{"location":"#motivation","text":"The motivation behind this software is to provide an easy way to mock external APIs during development phase without much configuration but also flexible enough.","title":"Motivation"},{"location":"#features","text":"Support for nested resources GET, POST, PUT, DELETE with NOT_FOUND , METHOD_NOT_ALLOWED , OK , CREATED and NO_CONTENT responses List responses with arrays or wrapped in a custom envelope Resource validation with BAD_REQUEST responses","title":"Features"},{"location":"#limitations","text":"PATCH NOT IMPLEMENTED In Memory database (by design)","title":"Limitations"},{"location":"defaults/","text":"Defaults Global settings You can apply configurations globally instead of repeating each one on every route or resource. Add a section defaults to your configuration file. defaults: authorization: Bearer #default None envelope: items #default null id-field: id #default id id-type: String #default String id-length: 6 #default 6 total-elements: #default null strict-validation: true #default false create-on-put: false #default false routes: - path: \"/users\" resources: - name: \"users\" template: id: String name: String age: Number","title":"Defaults"},{"location":"defaults/#defaults","text":"","title":"Defaults"},{"location":"defaults/#global-settings","text":"You can apply configurations globally instead of repeating each one on every route or resource. Add a section defaults to your configuration file. defaults: authorization: Bearer #default None envelope: items #default null id-field: id #default id id-type: String #default String id-length: 6 #default 6 total-elements: #default null strict-validation: true #default false create-on-put: false #default false routes: - path: \"/users\" resources: - name: \"users\" template: id: String name: String age: Number","title":"Global settings"},{"location":"quick-start/","text":"Quick start json-mockr requires a configuration file. The minimum requirements are that you define the routes you want to mock. The application will make some assumptions on the resources you want and what ids to use. Create a configuration file config.yaml with the routes you want to mock. routes: - path: \"/users\" - path: \"/users/{id}\" Start json-mockr with docker mounting the configuration file in the container and setting the file location docker run -p 8080:8080 -v ${PWD}/config.yaml:/app/config.yaml \\ -e JSON_MOCA_CONFIG_FILE=/app/config.yaml json-mockr:<version> Execute a POST request curl --request POST \\ --url http://localhost:8080/users/ \\ --header 'Content-Type: application/json' \\ --data ' { \"name\": \"Peter\", \"email\": \"pete@company.com\" }' New resource is created with a generated ID { \"id\": \"pkk0xV\", \"name\": \"Peter\", \"email\": \"pete@company.com\" }","title":"Quick start"},{"location":"quick-start/#quick-start","text":"json-mockr requires a configuration file. The minimum requirements are that you define the routes you want to mock. The application will make some assumptions on the resources you want and what ids to use. Create a configuration file config.yaml with the routes you want to mock. routes: - path: \"/users\" - path: \"/users/{id}\" Start json-mockr with docker mounting the configuration file in the container and setting the file location docker run -p 8080:8080 -v ${PWD}/config.yaml:/app/config.yaml \\ -e JSON_MOCA_CONFIG_FILE=/app/config.yaml json-mockr:<version> Execute a POST request curl --request POST \\ --url http://localhost:8080/users/ \\ --header 'Content-Type: application/json' \\ --data ' { \"name\": \"Peter\", \"email\": \"pete@company.com\" }' New resource is created with a generated ID { \"id\": \"pkk0xV\", \"name\": \"Peter\", \"email\": \"pete@company.com\" }","title":"Quick start"},{"location":"resources/","text":"Resources Seed data If your configuration only contains routes you will start with an empty set of resources, but you can provide seed data to json-mockr routes: - path: \"/users\" - path: \"/users/{id}\" resources: - name: \"users\" seed-data-file:/data/users.json the seed file must be a JSON Array, ex: [ { \"name\": \"Peter\", \"email\": \"pete@company.com\", \"age\": 45 }, { \"name\": \"Mary\", \"email\": \"mary@company.com\", \"age\": 28 } ] Response Customization By default, list responses are arrays [ { \"name\": \"Peter\", \"email\": \"pete@company.com\" }, { \"name\": \"Mary\", \"email\": \"mary@company.com\" } ] you can customize your resource ro return the elements inside an Envelope with routes: - path: \"/users\" - path: \"/users/{id}\" resources: - name: \"users\" envelope: items { \"items\": [ { \"name\": \"Peter\", \"email\": \"pete@company.com\" }, { \"name\": \"Mary\", \"email\": \"mary@company.com\" } ] } when using an Envelope you can also define a field that will contain the total number of elements returned routes: - path: \"/users\" - path: \"/users/{id}\" resources: - name: \"users\" envelope: items total-elements: totalCount { \"items\": [ { \"name\": \"Peter\", \"email\": \"pete@company.com\" }, { \"name\": \"Mary\", \"email\": \"mary@company.com\" } ], \"totalCount\": 2 } POST POST will generate ids automatically, by default all ids are random Strings and, it's assumed that the name od the id field is id (lower case) to changes this behaviour you can add the following configuration routes: - path: \"/users\" - path: \"/users/{userId}\" resources: - name: \"users\" id-field: userId id-type: Number id-length: 6 Possible Id types are: String , Number PUT By default, PUT only tries to update existing elements, if you want to allow creation on PUT, the url id will be used and any id on the request body will be ignored routes: - path: \"/users\" - path: \"/users/{id}\" resources: - name: \"users\" create-on-put: true Validation If you want to validate the request when doing POST or PUT just add a Template to your resource configuration routes: - path: \"/users\" - path: \"/users/{id}\" resources: - name: \"users\" template: id: String name: String email: String age: Number json-mockr will return a 400 BAD_REQUEST if the request is invalid Possible type values are: String , Number , Boolean , Fractional , Object , Array , Null","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#seed-data","text":"If your configuration only contains routes you will start with an empty set of resources, but you can provide seed data to json-mockr routes: - path: \"/users\" - path: \"/users/{id}\" resources: - name: \"users\" seed-data-file:/data/users.json the seed file must be a JSON Array, ex: [ { \"name\": \"Peter\", \"email\": \"pete@company.com\", \"age\": 45 }, { \"name\": \"Mary\", \"email\": \"mary@company.com\", \"age\": 28 } ]","title":"Seed data"},{"location":"resources/#response-customization","text":"By default, list responses are arrays [ { \"name\": \"Peter\", \"email\": \"pete@company.com\" }, { \"name\": \"Mary\", \"email\": \"mary@company.com\" } ] you can customize your resource ro return the elements inside an Envelope with routes: - path: \"/users\" - path: \"/users/{id}\" resources: - name: \"users\" envelope: items { \"items\": [ { \"name\": \"Peter\", \"email\": \"pete@company.com\" }, { \"name\": \"Mary\", \"email\": \"mary@company.com\" } ] } when using an Envelope you can also define a field that will contain the total number of elements returned routes: - path: \"/users\" - path: \"/users/{id}\" resources: - name: \"users\" envelope: items total-elements: totalCount { \"items\": [ { \"name\": \"Peter\", \"email\": \"pete@company.com\" }, { \"name\": \"Mary\", \"email\": \"mary@company.com\" } ], \"totalCount\": 2 }","title":"Response Customization"},{"location":"resources/#post","text":"POST will generate ids automatically, by default all ids are random Strings and, it's assumed that the name od the id field is id (lower case) to changes this behaviour you can add the following configuration routes: - path: \"/users\" - path: \"/users/{userId}\" resources: - name: \"users\" id-field: userId id-type: Number id-length: 6 Possible Id types are: String , Number","title":"POST"},{"location":"resources/#put","text":"By default, PUT only tries to update existing elements, if you want to allow creation on PUT, the url id will be used and any id on the request body will be ignored routes: - path: \"/users\" - path: \"/users/{id}\" resources: - name: \"users\" create-on-put: true","title":"PUT"},{"location":"resources/#validation","text":"If you want to validate the request when doing POST or PUT just add a Template to your resource configuration routes: - path: \"/users\" - path: \"/users/{id}\" resources: - name: \"users\" template: id: String name: String email: String age: Number json-mockr will return a 400 BAD_REQUEST if the request is invalid Possible type values are: String , Number , Boolean , Fractional , Object , Array , Null","title":"Validation"},{"location":"routes/","text":"Routes Sub-routes and nested resources You can define sub-routes like this: routes: - path: \"/users\" - path: \"/users/{id}\" - path: \"/users/{user_id}/orders\" - path: \"/users/{user_id}/orders/{id}\" json-mockr will identify 2 resources (users & orders) and filter the data based on the path variables defined. - GET \"/users/ABC/orders\" will filter all Orders than contain a field named user_id with values ABC - GET \"/users/ABC/orders/XYZ\" will find an Order than contains a field named user_id with values ABC and a field Id with XYZ It's also possible to define a path variable that targets a nested object using the @ separator, ex: request `GET /users/ABC/orders to defined route: - path: \"/users/{user@id}/orders\" in this case we filter all Orders than contain an object named user with an id field inside with value ABC Authorization You can define Authorization per route routes: - path: \"/users\" authorization: Basic The server will respond with a 401 UNAUTHORIZED if no valid authorization header exists. Possible authorization values are: Basic , Bearer , None","title":"Routes"},{"location":"routes/#routes","text":"","title":"Routes"},{"location":"routes/#sub-routes-and-nested-resources","text":"You can define sub-routes like this: routes: - path: \"/users\" - path: \"/users/{id}\" - path: \"/users/{user_id}/orders\" - path: \"/users/{user_id}/orders/{id}\" json-mockr will identify 2 resources (users & orders) and filter the data based on the path variables defined. - GET \"/users/ABC/orders\" will filter all Orders than contain a field named user_id with values ABC - GET \"/users/ABC/orders/XYZ\" will find an Order than contains a field named user_id with values ABC and a field Id with XYZ It's also possible to define a path variable that targets a nested object using the @ separator, ex: request `GET /users/ABC/orders to defined route: - path: \"/users/{user@id}/orders\" in this case we filter all Orders than contain an object named user with an id field inside with value ABC","title":"Sub-routes and nested resources"},{"location":"routes/#authorization","text":"You can define Authorization per route routes: - path: \"/users\" authorization: Basic The server will respond with a 401 UNAUTHORIZED if no valid authorization header exists. Possible authorization values are: Basic , Bearer , None","title":"Authorization"}]}